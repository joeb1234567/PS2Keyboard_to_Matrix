   1               		.file	"io.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	InitIO
  12               	InitIO:
  13               	.LFB8:
  14               		.file 1 "dragon_beta/io.c"
   1:dragon_beta/io.c **** /*
   2:dragon_beta/io.c **** 	IO	: IO routines for the Dragon/CoCo.
   3:dragon_beta/io.c **** 
   4:dragon_beta/io.c **** 	2020-12-28, P.Harvey-Smith.
   5:dragon_beta/io.c **** */
   6:dragon_beta/io.c **** 
   7:dragon_beta/io.c **** #include <avr/interrupt.h>
   8:dragon_beta/io.c **** #include <inttypes.h>
   9:dragon_beta/io.c **** #include <util/delay.h>
  10:dragon_beta/io.c **** #include "io.h"
  11:dragon_beta/io.c **** #include "status.h"
  12:dragon_beta/io.c **** #include "matrix_kbd.h"
  13:dragon_beta/io.c **** #include "scancode.h"
  14:dragon_beta/io.c **** 
  15:dragon_beta/io.c **** void InitIO(void)
  16:dragon_beta/io.c **** {
  15               		.loc 1 16 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  17:dragon_beta/io.c **** 	// Make reset line an input
  18:dragon_beta/io.c **** 	RESET_DDR &= ~RESET_MASK;
  21               		.loc 1 18 0
  22 0000 5398      		cbi 0xa,3
  19:dragon_beta/io.c **** 	
  20:dragon_beta/io.c **** 	// Dragon or CoCo switch, make it an input
  21:dragon_beta/io.c **** 	DORC_DDR &= ~DORC_MASK;
  23               		.loc 1 21 0
  24 0002 2098      		cbi 0x4,0
  22:dragon_beta/io.c **** 	
  23:dragon_beta/io.c **** 	// Dragon or CoCo switch, activate pullup
  24:dragon_beta/io.c **** 	DORC_PORT |= DORC_MASK;
  25               		.loc 1 24 0
  26 0004 289A      		sbi 0x5,0
  27 0006 0895      		ret
  28               		.cfi_endproc
  29               	.LFE8:
  31               	.global	ResetMachine
  33               	ResetMachine:
  34               	.LFB9:
  25:dragon_beta/io.c **** }
  26:dragon_beta/io.c **** 
  27:dragon_beta/io.c **** void ResetMachine(void)
  28:dragon_beta/io.c **** {
  35               		.loc 1 28 0
  36               		.cfi_startproc
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  29:dragon_beta/io.c **** 	log0("ResetMachine()\n");
  41               		.loc 1 29 0
  42 0008 80E0      		ldi r24,lo8(__c.2160)
  43 000a 90E0      		ldi r25,hi8(__c.2160)
  44 000c 9F93      		push r25
  45               	.LCFI0:
  46               		.cfi_def_cfa_offset 3
  47 000e 8F93      		push r24
  48               	.LCFI1:
  49               		.cfi_def_cfa_offset 4
  50 0010 80E0      		ldi r24,lo8(ser0stream)
  51 0012 90E0      		ldi r25,hi8(ser0stream)
  52 0014 9F93      		push r25
  53               	.LCFI2:
  54               		.cfi_def_cfa_offset 5
  55 0016 8F93      		push r24
  56               	.LCFI3:
  57               		.cfi_def_cfa_offset 6
  58 0018 0E94 0000 		call fprintf_P
  59               	.LVL0:
  30:dragon_beta/io.c **** 	// Make reset line an output, and take reset line low
  31:dragon_beta/io.c **** 	RESET_DDR	|= RESET_MASK;
  60               		.loc 1 31 0
  61 001c 539A      		sbi 0xa,3
  32:dragon_beta/io.c **** 	RESET_PORT	&= ~RESET_MASK;
  62               		.loc 1 32 0
  63 001e 5B98      		cbi 0xb,3
  64               	.LVL1:
  65               	.LBB5:
  66               	.LBB6:
  67               		.file 2 "d:\\winavr\\avr\\include\\util\\delay.h"
   1:d:\winavr\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:d:\winavr\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:d:\winavr\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:d:\winavr\avr\include\util\delay.h ****    All rights reserved.
   5:d:\winavr\avr\include\util\delay.h **** 
   6:d:\winavr\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:d:\winavr\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:d:\winavr\avr\include\util\delay.h **** 
   9:d:\winavr\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:d:\winavr\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:d:\winavr\avr\include\util\delay.h **** 
  12:d:\winavr\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:d:\winavr\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:d:\winavr\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:d:\winavr\avr\include\util\delay.h ****      distribution.
  16:d:\winavr\avr\include\util\delay.h **** 
  17:d:\winavr\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:d:\winavr\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:d:\winavr\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:d:\winavr\avr\include\util\delay.h **** 
  21:d:\winavr\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:d:\winavr\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:d:\winavr\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:d:\winavr\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:d:\winavr\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:d:\winavr\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:d:\winavr\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:d:\winavr\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:d:\winavr\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:d:\winavr\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:d:\winavr\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:d:\winavr\avr\include\util\delay.h **** 
  33:d:\winavr\avr\include\util\delay.h **** /* $Id$ */
  34:d:\winavr\avr\include\util\delay.h **** 
  35:d:\winavr\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:d:\winavr\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:d:\winavr\avr\include\util\delay.h **** 
  38:d:\winavr\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:d:\winavr\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:d:\winavr\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:d:\winavr\avr\include\util\delay.h **** #  endif
  42:d:\winavr\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:d:\winavr\avr\include\util\delay.h **** 
  44:d:\winavr\avr\include\util\delay.h **** #include <inttypes.h>
  45:d:\winavr\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:d:\winavr\avr\include\util\delay.h **** #include <math.h>
  47:d:\winavr\avr\include\util\delay.h **** 
  48:d:\winavr\avr\include\util\delay.h **** /** \file */
  49:d:\winavr\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:d:\winavr\avr\include\util\delay.h ****     \code
  51:d:\winavr\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:d:\winavr\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:d:\winavr\avr\include\util\delay.h ****     #include <util/delay.h>
  54:d:\winavr\avr\include\util\delay.h ****     \endcode
  55:d:\winavr\avr\include\util\delay.h **** 
  56:d:\winavr\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:d:\winavr\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:d:\winavr\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:d:\winavr\avr\include\util\delay.h ****     used.
  60:d:\winavr\avr\include\util\delay.h **** 
  61:d:\winavr\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:d:\winavr\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:d:\winavr\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:d:\winavr\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:d:\winavr\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:d:\winavr\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:d:\winavr\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:d:\winavr\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:d:\winavr\avr\include\util\delay.h **** 
  70:d:\winavr\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:d:\winavr\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:d:\winavr\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:d:\winavr\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:d:\winavr\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:d:\winavr\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:d:\winavr\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:d:\winavr\avr\include\util\delay.h ****     routines linked into the application.
  78:d:\winavr\avr\include\util\delay.h **** 
  79:d:\winavr\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:d:\winavr\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:d:\winavr\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:d:\winavr\avr\include\util\delay.h **** 
  83:d:\winavr\avr\include\util\delay.h **** */
  84:d:\winavr\avr\include\util\delay.h **** 
  85:d:\winavr\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:d:\winavr\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:d:\winavr\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:d:\winavr\avr\include\util\delay.h **** #endif
  89:d:\winavr\avr\include\util\delay.h **** 
  90:d:\winavr\avr\include\util\delay.h **** #ifndef F_CPU
  91:d:\winavr\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:d:\winavr\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:d:\winavr\avr\include\util\delay.h **** /** \ingroup util_delay
  94:d:\winavr\avr\include\util\delay.h ****     \def F_CPU
  95:d:\winavr\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:d:\winavr\avr\include\util\delay.h **** 
  97:d:\winavr\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:d:\winavr\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:d:\winavr\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:d:\winavr\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:d:\winavr\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:d:\winavr\avr\include\util\delay.h **** 
 103:d:\winavr\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:d:\winavr\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:d:\winavr\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:d:\winavr\avr\include\util\delay.h ****     integer value.
 107:d:\winavr\avr\include\util\delay.h ****  */
 108:d:\winavr\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:d:\winavr\avr\include\util\delay.h **** #endif
 110:d:\winavr\avr\include\util\delay.h **** 
 111:d:\winavr\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:d:\winavr\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:d:\winavr\avr\include\util\delay.h **** #endif
 114:d:\winavr\avr\include\util\delay.h **** 
 115:d:\winavr\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:d:\winavr\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:d:\winavr\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:d:\winavr\avr\include\util\delay.h **** #  include <math.h>
 119:d:\winavr\avr\include\util\delay.h **** #endif
 120:d:\winavr\avr\include\util\delay.h **** 
 121:d:\winavr\avr\include\util\delay.h **** /**
 122:d:\winavr\avr\include\util\delay.h ****    \ingroup util_delay
 123:d:\winavr\avr\include\util\delay.h **** 
 124:d:\winavr\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:d:\winavr\avr\include\util\delay.h **** 
 126:d:\winavr\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:d:\winavr\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:d:\winavr\avr\include\util\delay.h **** 
 129:d:\winavr\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:d:\winavr\avr\include\util\delay.h **** 
 131:d:\winavr\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:d:\winavr\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:d:\winavr\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:d:\winavr\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:d:\winavr\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:d:\winavr\avr\include\util\delay.h **** 
 137:d:\winavr\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:d:\winavr\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:d:\winavr\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:d:\winavr\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:d:\winavr\avr\include\util\delay.h **** 
 142:d:\winavr\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:d:\winavr\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:d:\winavr\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:d:\winavr\avr\include\util\delay.h ****    microseconds of delay.
 146:d:\winavr\avr\include\util\delay.h **** 
 147:d:\winavr\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:d:\winavr\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:d:\winavr\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:d:\winavr\avr\include\util\delay.h ****    respectively.
 151:d:\winavr\avr\include\util\delay.h **** 
 152:d:\winavr\avr\include\util\delay.h ****    \note
 153:d:\winavr\avr\include\util\delay.h **** 
 154:d:\winavr\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:d:\winavr\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:d:\winavr\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:d:\winavr\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:d:\winavr\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:d:\winavr\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:d:\winavr\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:d:\winavr\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:d:\winavr\avr\include\util\delay.h ****    not available to the compiler then.
 163:d:\winavr\avr\include\util\delay.h **** 
 164:d:\winavr\avr\include\util\delay.h ****  */
 165:d:\winavr\avr\include\util\delay.h **** void
 166:d:\winavr\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:d:\winavr\avr\include\util\delay.h **** {
 168:d:\winavr\avr\include\util\delay.h **** 	double __tmp ;
 169:d:\winavr\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:d:\winavr\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:d:\winavr\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:d:\winavr\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:d:\winavr\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:d:\winavr\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:d:\winavr\avr\include\util\delay.h **** 
 176:d:\winavr\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:d:\winavr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:d:\winavr\avr\include\util\delay.h **** 
 179:d:\winavr\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:d:\winavr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:d:\winavr\avr\include\util\delay.h **** 
 182:d:\winavr\avr\include\util\delay.h **** 	#else
 183:d:\winavr\avr\include\util\delay.h **** 		//round up by default
 184:d:\winavr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:d:\winavr\avr\include\util\delay.h **** 	#endif
 186:d:\winavr\avr\include\util\delay.h **** 
 187:d:\winavr\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  68               		.loc 2 187 0
  69 0020 8FEF      		ldi r24,lo8(9215)
  70 0022 93E2      		ldi r25,hi8(9215)
  71 0024 0197      	1:	sbiw r24,1
  72 0026 01F4      		brne 1b
  73 0028 00C0      		rjmp .
  74 002a 0000      		nop
  75               	.LVL2:
  76               	.LBE6:
  77               	.LBE5:
  33:dragon_beta/io.c **** 	
  34:dragon_beta/io.c **** 	// Let it take effect
  35:dragon_beta/io.c **** 	_delay_ms(10);
  36:dragon_beta/io.c **** 	
  37:dragon_beta/io.c **** 	// make it an input again, and let line float
  38:dragon_beta/io.c **** 	RESET_DDR	&= ~RESET_MASK;
  78               		.loc 1 38 0
  79 002c 5398      		cbi 0xa,3
  39:dragon_beta/io.c **** 	RESET_PORT	&= ~RESET_MASK;
  80               		.loc 1 39 0
  81 002e 5B98      		cbi 0xb,3
  40:dragon_beta/io.c **** }
  82               		.loc 1 40 0
  83 0030 0F90      		pop __tmp_reg__
  84 0032 0F90      		pop __tmp_reg__
  85 0034 0F90      		pop __tmp_reg__
  86 0036 0F90      		pop __tmp_reg__
  87               	.LCFI4:
  88               		.cfi_def_cfa_offset 2
  89 0038 0895      		ret
  90               		.cfi_endproc
  91               	.LFE9:
  93               	.global	MainLoopPoll
  95               	MainLoopPoll:
  96               	.LFB10:
  41:dragon_beta/io.c **** 
  42:dragon_beta/io.c **** // Called from main loop.
  43:dragon_beta/io.c **** void MainLoopPoll(void)
  44:dragon_beta/io.c **** {	
  97               		.loc 1 44 0
  98               		.cfi_startproc
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
 103 003a 0895      		ret
 104               		.cfi_endproc
 105               	.LFE10:
 107               	.global	TargetKeyCallback
 109               	TargetKeyCallback:
 110               	.LFB11:
  45:dragon_beta/io.c **** }
  46:dragon_beta/io.c **** 
  47:dragon_beta/io.c **** uint8_t TargetKeyCallback(uint8_t	PrefixCode,
  48:dragon_beta/io.c **** 						  uint8_t	KeyCode,
  49:dragon_beta/io.c **** 					      uint8_t	State)
  50:dragon_beta/io.c **** {
 111               		.loc 1 50 0
 112               		.cfi_startproc
 113               	.LVL3:
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 0 */
 117               	.L__stack_usage = 0
  51:dragon_beta/io.c **** 	return false;
  52:dragon_beta/io.c **** }...
 118               		.loc 1 52 0
 119 003c 80E0      		ldi r24,0
 120               	.LVL4:
 121 003e 0895      		ret
 122               		.cfi_endproc
 123               	.LFE11:
 125               		.section	.progmem.data,"a",@progbits
 128               	__c.2160:
 129 0000 5265 7365 		.string	"ResetMachine()\n"
 129      744D 6163 
 129      6869 6E65 
 129      2829 0A00 
 130               		.text
 131               	.Letext0:
 132               		.file 3 "d:\\winavr\\avr\\include\\stdint.h"
 133               		.file 4 "d:\\winavr\\avr\\include\\stdio.h"
 134               		.file 5 "./common/status.h"
DEFINED SYMBOLS
                            *ABS*:00000000 io.c
D:\cygwin64\tmp\ccyzVmOf.s:2      *ABS*:0000003e __SP_H__
D:\cygwin64\tmp\ccyzVmOf.s:3      *ABS*:0000003d __SP_L__
D:\cygwin64\tmp\ccyzVmOf.s:4      *ABS*:0000003f __SREG__
D:\cygwin64\tmp\ccyzVmOf.s:5      *ABS*:00000000 __tmp_reg__
D:\cygwin64\tmp\ccyzVmOf.s:6      *ABS*:00000001 __zero_reg__
D:\cygwin64\tmp\ccyzVmOf.s:12     .text:00000000 InitIO
D:\cygwin64\tmp\ccyzVmOf.s:33     .text:00000008 ResetMachine
D:\cygwin64\tmp\ccyzVmOf.s:128    .progmem.data:00000000 __c.2160
D:\cygwin64\tmp\ccyzVmOf.s:95     .text:0000003a MainLoopPoll
D:\cygwin64\tmp\ccyzVmOf.s:109    .text:0000003c TargetKeyCallback

UNDEFINED SYMBOLS
ser0stream
fprintf_P
