   1               		.file	"mt8816.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	mt_init
  12               	mt_init:
  13               	.LFB9:
  14               		.file 1 "common/mt8816.c"
   1:common/mt8816.c **** /* 
   2:common/mt8816.c **** 	mt8816.c
   3:common/mt8816.c **** 	
   4:common/mt8816.c **** 	Driver for handling the MT8816 crosspoint switch.
   5:common/mt8816.c **** 	
   6:common/mt8816.c **** 	2011-04-27, Seperated from generic matrix code.
   7:common/mt8816.c **** */
   8:common/mt8816.c **** 
   9:common/mt8816.c **** #include <avr/io.h>
  10:common/mt8816.c **** #include <avr/pgmspace.h>
  11:common/mt8816.c **** #include <util/delay.h>
  12:common/mt8816.c **** #include "mt8816.h"
  13:common/mt8816.c **** #include "status.h"
  14:common/mt8816.c **** #include "matrix_kbd.h"
  15:common/mt8816.c **** #include "scancode.h"
  16:common/mt8816.c **** 
  17:common/mt8816.c **** #define	MT_KEY_DOWN	0x80
  18:common/mt8816.c **** 
  19:common/mt8816.c **** // Reset the MT8816
  20:common/mt8816.c **** static void mt_reset(void)
  21:common/mt8816.c **** {
  22:common/mt8816.c **** 	// Reset the MT8816, this clears all keypresses.
  23:common/mt8816.c **** 	MTAssertReset();			
  24:common/mt8816.c **** 	_delay_ms(1);
  25:common/mt8816.c **** 	MTClearReset();
  26:common/mt8816.c **** 	MTClearStrobe();
  27:common/mt8816.c **** }
  28:common/mt8816.c **** 
  29:common/mt8816.c **** 
  30:common/mt8816.c **** // MT_init, initialise MT8816 and keyboard variables.
  31:common/mt8816.c **** void mt_init(void)
  32:common/mt8816.c **** {
  15               		.loc 1 32 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  33:common/mt8816.c **** 	// Initialise output ports connected to MT8816
  34:common/mt8816.c **** 	MT_KEYS_DDR |= 0xFF;
  21               		.loc 1 34 0
  22 0000 81B1      		in r24,0x1
  23 0002 8FEF      		ldi r24,lo8(-1)
  24 0004 81B9      		out 0x1,r24
  35:common/mt8816.c **** 	MT_CTRL_DDR	|= ((1<<MT_RESET) | (1<<MT_STROBE));
  25               		.loc 1 35 0
  26 0006 8AB1      		in r24,0xa
  27 0008 806C      		ori r24,lo8(-64)
  28 000a 8AB9      		out 0xa,r24
  29               	.LBB11:
  30               	.LBB12:
  23:common/mt8816.c **** 	_delay_ms(1);
  31               		.loc 1 23 0
  32 000c 5E9A      		sbi 0xb,6
  33               	.LVL0:
  34               	.LBB13:
  35               	.LBB14:
  36               		.file 2 "d:\\winavr\\avr\\include\\util\\delay.h"
   1:d:\winavr\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:d:\winavr\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:d:\winavr\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:d:\winavr\avr\include\util\delay.h ****    All rights reserved.
   5:d:\winavr\avr\include\util\delay.h **** 
   6:d:\winavr\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:d:\winavr\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:d:\winavr\avr\include\util\delay.h **** 
   9:d:\winavr\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:d:\winavr\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:d:\winavr\avr\include\util\delay.h **** 
  12:d:\winavr\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:d:\winavr\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:d:\winavr\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:d:\winavr\avr\include\util\delay.h ****      distribution.
  16:d:\winavr\avr\include\util\delay.h **** 
  17:d:\winavr\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:d:\winavr\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:d:\winavr\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:d:\winavr\avr\include\util\delay.h **** 
  21:d:\winavr\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:d:\winavr\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:d:\winavr\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:d:\winavr\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:d:\winavr\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:d:\winavr\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:d:\winavr\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:d:\winavr\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:d:\winavr\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:d:\winavr\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:d:\winavr\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:d:\winavr\avr\include\util\delay.h **** 
  33:d:\winavr\avr\include\util\delay.h **** /* $Id$ */
  34:d:\winavr\avr\include\util\delay.h **** 
  35:d:\winavr\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:d:\winavr\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:d:\winavr\avr\include\util\delay.h **** 
  38:d:\winavr\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:d:\winavr\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:d:\winavr\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:d:\winavr\avr\include\util\delay.h **** #  endif
  42:d:\winavr\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:d:\winavr\avr\include\util\delay.h **** 
  44:d:\winavr\avr\include\util\delay.h **** #include <inttypes.h>
  45:d:\winavr\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:d:\winavr\avr\include\util\delay.h **** #include <math.h>
  47:d:\winavr\avr\include\util\delay.h **** 
  48:d:\winavr\avr\include\util\delay.h **** /** \file */
  49:d:\winavr\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:d:\winavr\avr\include\util\delay.h ****     \code
  51:d:\winavr\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:d:\winavr\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:d:\winavr\avr\include\util\delay.h ****     #include <util/delay.h>
  54:d:\winavr\avr\include\util\delay.h ****     \endcode
  55:d:\winavr\avr\include\util\delay.h **** 
  56:d:\winavr\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:d:\winavr\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:d:\winavr\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:d:\winavr\avr\include\util\delay.h ****     used.
  60:d:\winavr\avr\include\util\delay.h **** 
  61:d:\winavr\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:d:\winavr\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:d:\winavr\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:d:\winavr\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:d:\winavr\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:d:\winavr\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:d:\winavr\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:d:\winavr\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:d:\winavr\avr\include\util\delay.h **** 
  70:d:\winavr\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:d:\winavr\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:d:\winavr\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:d:\winavr\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:d:\winavr\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:d:\winavr\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:d:\winavr\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:d:\winavr\avr\include\util\delay.h ****     routines linked into the application.
  78:d:\winavr\avr\include\util\delay.h **** 
  79:d:\winavr\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:d:\winavr\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:d:\winavr\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:d:\winavr\avr\include\util\delay.h **** 
  83:d:\winavr\avr\include\util\delay.h **** */
  84:d:\winavr\avr\include\util\delay.h **** 
  85:d:\winavr\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:d:\winavr\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:d:\winavr\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:d:\winavr\avr\include\util\delay.h **** #endif
  89:d:\winavr\avr\include\util\delay.h **** 
  90:d:\winavr\avr\include\util\delay.h **** #ifndef F_CPU
  91:d:\winavr\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:d:\winavr\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:d:\winavr\avr\include\util\delay.h **** /** \ingroup util_delay
  94:d:\winavr\avr\include\util\delay.h ****     \def F_CPU
  95:d:\winavr\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:d:\winavr\avr\include\util\delay.h **** 
  97:d:\winavr\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:d:\winavr\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:d:\winavr\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:d:\winavr\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:d:\winavr\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:d:\winavr\avr\include\util\delay.h **** 
 103:d:\winavr\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:d:\winavr\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:d:\winavr\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:d:\winavr\avr\include\util\delay.h ****     integer value.
 107:d:\winavr\avr\include\util\delay.h ****  */
 108:d:\winavr\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:d:\winavr\avr\include\util\delay.h **** #endif
 110:d:\winavr\avr\include\util\delay.h **** 
 111:d:\winavr\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:d:\winavr\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:d:\winavr\avr\include\util\delay.h **** #endif
 114:d:\winavr\avr\include\util\delay.h **** 
 115:d:\winavr\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:d:\winavr\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:d:\winavr\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:d:\winavr\avr\include\util\delay.h **** #  include <math.h>
 119:d:\winavr\avr\include\util\delay.h **** #endif
 120:d:\winavr\avr\include\util\delay.h **** 
 121:d:\winavr\avr\include\util\delay.h **** /**
 122:d:\winavr\avr\include\util\delay.h ****    \ingroup util_delay
 123:d:\winavr\avr\include\util\delay.h **** 
 124:d:\winavr\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:d:\winavr\avr\include\util\delay.h **** 
 126:d:\winavr\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:d:\winavr\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:d:\winavr\avr\include\util\delay.h **** 
 129:d:\winavr\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:d:\winavr\avr\include\util\delay.h **** 
 131:d:\winavr\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:d:\winavr\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:d:\winavr\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:d:\winavr\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:d:\winavr\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:d:\winavr\avr\include\util\delay.h **** 
 137:d:\winavr\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:d:\winavr\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:d:\winavr\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:d:\winavr\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:d:\winavr\avr\include\util\delay.h **** 
 142:d:\winavr\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:d:\winavr\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:d:\winavr\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:d:\winavr\avr\include\util\delay.h ****    microseconds of delay.
 146:d:\winavr\avr\include\util\delay.h **** 
 147:d:\winavr\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:d:\winavr\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:d:\winavr\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:d:\winavr\avr\include\util\delay.h ****    respectively.
 151:d:\winavr\avr\include\util\delay.h **** 
 152:d:\winavr\avr\include\util\delay.h ****    \note
 153:d:\winavr\avr\include\util\delay.h **** 
 154:d:\winavr\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:d:\winavr\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:d:\winavr\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:d:\winavr\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:d:\winavr\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:d:\winavr\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:d:\winavr\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:d:\winavr\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:d:\winavr\avr\include\util\delay.h ****    not available to the compiler then.
 163:d:\winavr\avr\include\util\delay.h **** 
 164:d:\winavr\avr\include\util\delay.h ****  */
 165:d:\winavr\avr\include\util\delay.h **** void
 166:d:\winavr\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:d:\winavr\avr\include\util\delay.h **** {
 168:d:\winavr\avr\include\util\delay.h **** 	double __tmp ;
 169:d:\winavr\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:d:\winavr\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:d:\winavr\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:d:\winavr\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:d:\winavr\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:d:\winavr\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:d:\winavr\avr\include\util\delay.h **** 
 176:d:\winavr\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:d:\winavr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:d:\winavr\avr\include\util\delay.h **** 
 179:d:\winavr\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:d:\winavr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:d:\winavr\avr\include\util\delay.h **** 
 182:d:\winavr\avr\include\util\delay.h **** 	#else
 183:d:\winavr\avr\include\util\delay.h **** 		//round up by default
 184:d:\winavr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:d:\winavr\avr\include\util\delay.h **** 	#endif
 186:d:\winavr\avr\include\util\delay.h **** 
 187:d:\winavr\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  37               		.loc 2 187 0
  38 000e 89E9      		ldi r24,lo8(921)
  39 0010 93E0      		ldi r25,hi8(921)
  40 0012 0197      	1:	sbiw r24,1
  41 0014 01F4      		brne 1b
  42 0016 00C0      		rjmp .
  43               	.LVL1:
  44               	.LBE14:
  45               	.LBE13:
  25:common/mt8816.c **** 	MTClearStrobe();
  46               		.loc 1 25 0
  47 0018 5E98      		cbi 0xb,6
  26:common/mt8816.c **** }
  48               		.loc 1 26 0
  49 001a 5F98      		cbi 0xb,7
  50               	.LBE12:
  51               	.LBE11:
  36:common/mt8816.c **** 	mt_reset();
  37:common/mt8816.c **** 	logv0("MT8816 driver initialised\n");
  52               		.loc 1 37 0
  53 001c 8091 0000 		lds r24,STATUS_VERBOSE
  54 0020 8823      		tst r24
  55 0022 01F0      		breq .L1
  56               		.loc 1 37 0 is_stmt 0 discriminator 1
  57 0024 80E0      		ldi r24,lo8(__c.2159)
  58 0026 90E0      		ldi r25,hi8(__c.2159)
  59 0028 9F93      		push r25
  60               	.LCFI0:
  61               		.cfi_def_cfa_offset 3
  62 002a 8F93      		push r24
  63               	.LCFI1:
  64               		.cfi_def_cfa_offset 4
  65 002c 80E0      		ldi r24,lo8(ser0stream)
  66 002e 90E0      		ldi r25,hi8(ser0stream)
  67 0030 9F93      		push r25
  68               	.LCFI2:
  69               		.cfi_def_cfa_offset 5
  70 0032 8F93      		push r24
  71               	.LCFI3:
  72               		.cfi_def_cfa_offset 6
  73 0034 0E94 0000 		call fprintf_P
  74               	.LVL2:
  75 0038 0F90      		pop __tmp_reg__
  76 003a 0F90      		pop __tmp_reg__
  77 003c 0F90      		pop __tmp_reg__
  78 003e 0F90      		pop __tmp_reg__
  79               	.LCFI4:
  80               		.cfi_def_cfa_offset 2
  81               	.L1:
  82 0040 0895      		ret
  83               		.cfi_endproc
  84               	.LFE9:
  86               	.global	mt_output_key
  88               	mt_output_key:
  89               	.LFB10:
  38:common/mt8816.c **** }
  39:common/mt8816.c **** 
  40:common/mt8816.c **** /* 
  41:common/mt8816.c **** 	Latch keypress out to MT8816.
  42:common/mt8816.c **** 	
  43:common/mt8816.c **** 	KeyCode should be formatted as follows :-
  44:common/mt8816.c **** 	b7		= Don't care, masked out.
  45:common/mt8816.c **** 	b6..b4	= Row Data fed to AY2..0
  46:common/mt8816.c **** 	b3..b0	= Col data fed to AX3..0
  47:common/mt8816.c **** */	
  48:common/mt8816.c **** 
  49:common/mt8816.c **** void mt_output_key(uint8_t	KeyCode,
  50:common/mt8816.c **** 				   uint8_t	State)
  51:common/mt8816.c **** {
  90               		.loc 1 51 0 is_stmt 1
  91               		.cfi_startproc
  92               	.LVL3:
  93               	/* prologue: function */
  94               	/* frame size = 0 */
  95               	/* stack size = 0 */
  96               	.L__stack_usage = 0
  52:common/mt8816.c **** 	switch (KeyCode)
  97               		.loc 1 52 0
  98 0042 8F3F      		cpi r24,lo8(-1)
  99 0044 01F0      		breq .L7
  53:common/mt8816.c **** 	{
  54:common/mt8816.c **** 		case 0xFF :
  55:common/mt8816.c **** 			break;
  56:common/mt8816.c **** 		
  57:common/mt8816.c **** 		default :
  58:common/mt8816.c **** 			// combine code and up/down state
  59:common/mt8816.c **** 			if (State==KEY_DOWN)
 100               		.loc 1 59 0
 101 0046 6130      		cpi r22,lo8(1)
 102 0048 01F4      		brne .L10
  60:common/mt8816.c **** 				KeyCode|=MT_KEY_DOWN;
 103               		.loc 1 60 0
 104 004a 8068      		ori r24,lo8(-128)
 105               	.LVL4:
 106 004c 00C0      		rjmp .L11
 107               	.L10:
  61:common/mt8816.c **** 			else
  62:common/mt8816.c **** 				KeyCode&=~MT_KEY_DOWN;
 108               		.loc 1 62 0
 109 004e 8F77      		andi r24,lo8(127)
 110               	.LVL5:
 111               	.L11:
  63:common/mt8816.c **** 			
  64:common/mt8816.c **** 			// output matrix code, and assert strobe to MT8816
  65:common/mt8816.c **** 			MT_KEYS_PORT=KeyCode;
 112               		.loc 1 65 0
 113 0050 82B9      		out 0x2,r24
  66:common/mt8816.c **** 			MTAssertStrobe();
 114               		.loc 1 66 0
 115 0052 5F9A      		sbi 0xb,7
 116               	.LVL6:
 117               	.LBB15:
 118               	.LBB16:
 188:d:\winavr\avr\include\util\delay.h **** 
 189:d:\winavr\avr\include\util\delay.h **** #else
 190:d:\winavr\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:d:\winavr\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:d:\winavr\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:d:\winavr\avr\include\util\delay.h **** 		__ticks = 1;
 194:d:\winavr\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:d:\winavr\avr\include\util\delay.h **** 	{
 196:d:\winavr\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:d:\winavr\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:d:\winavr\avr\include\util\delay.h **** 		while(__ticks)
 199:d:\winavr\avr\include\util\delay.h **** 		{
 200:d:\winavr\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:d:\winavr\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:d:\winavr\avr\include\util\delay.h **** 			__ticks --;
 203:d:\winavr\avr\include\util\delay.h **** 		}
 204:d:\winavr\avr\include\util\delay.h **** 		return;
 205:d:\winavr\avr\include\util\delay.h **** 	}
 206:d:\winavr\avr\include\util\delay.h **** 	else
 207:d:\winavr\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:d:\winavr\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:d:\winavr\avr\include\util\delay.h **** #endif
 210:d:\winavr\avr\include\util\delay.h **** }
 211:d:\winavr\avr\include\util\delay.h **** 
 212:d:\winavr\avr\include\util\delay.h **** /**
 213:d:\winavr\avr\include\util\delay.h ****    \ingroup util_delay
 214:d:\winavr\avr\include\util\delay.h **** 
 215:d:\winavr\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:d:\winavr\avr\include\util\delay.h **** 
 217:d:\winavr\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:d:\winavr\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:d:\winavr\avr\include\util\delay.h **** 
 220:d:\winavr\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:d:\winavr\avr\include\util\delay.h **** 
 222:d:\winavr\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:d:\winavr\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:d:\winavr\avr\include\util\delay.h ****    will not be informed about this case.
 225:d:\winavr\avr\include\util\delay.h **** 
 226:d:\winavr\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:d:\winavr\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:d:\winavr\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:d:\winavr\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:d:\winavr\avr\include\util\delay.h **** 
 231:d:\winavr\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:d:\winavr\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:d:\winavr\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:d:\winavr\avr\include\util\delay.h ****    microseconds of delay.
 235:d:\winavr\avr\include\util\delay.h **** 
 236:d:\winavr\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:d:\winavr\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:d:\winavr\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:d:\winavr\avr\include\util\delay.h ****    respectively.
 240:d:\winavr\avr\include\util\delay.h **** 
 241:d:\winavr\avr\include\util\delay.h ****    \note
 242:d:\winavr\avr\include\util\delay.h **** 
 243:d:\winavr\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:d:\winavr\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:d:\winavr\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:d:\winavr\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:d:\winavr\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:d:\winavr\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:d:\winavr\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:d:\winavr\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:d:\winavr\avr\include\util\delay.h ****    not available to the compiler then.
 252:d:\winavr\avr\include\util\delay.h **** 
 253:d:\winavr\avr\include\util\delay.h ****  */
 254:d:\winavr\avr\include\util\delay.h **** void
 255:d:\winavr\avr\include\util\delay.h **** _delay_us(double __us)
 256:d:\winavr\avr\include\util\delay.h **** {
 257:d:\winavr\avr\include\util\delay.h **** 	double __tmp ;
 258:d:\winavr\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:d:\winavr\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:d:\winavr\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:d:\winavr\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 262:d:\winavr\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:d:\winavr\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:d:\winavr\avr\include\util\delay.h **** 
 265:d:\winavr\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:d:\winavr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:d:\winavr\avr\include\util\delay.h **** 
 268:d:\winavr\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:d:\winavr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:d:\winavr\avr\include\util\delay.h **** 
 271:d:\winavr\avr\include\util\delay.h **** 	#else
 272:d:\winavr\avr\include\util\delay.h **** 		//round up by default
 273:d:\winavr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:d:\winavr\avr\include\util\delay.h **** 	#endif
 275:d:\winavr\avr\include\util\delay.h **** 
 276:d:\winavr\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 119               		.loc 2 276 0
 120 0054 8CE0      		ldi r24,lo8(12)
 121 0056 8A95      	1:	dec r24
 122 0058 01F4      		brne 1b
 123               	.LVL7:
 124 005a 0000      		nop
 125               	.LVL8:
 126               	.LBE16:
 127               	.LBE15:
  67:common/mt8816.c ****     
  68:common/mt8816.c **** 			// Wait a while for it to settle, then clear strobe
  69:common/mt8816.c **** 			_delay_us(10);
  70:common/mt8816.c **** 			MTClearStrobe();
 128               		.loc 1 70 0
 129 005c 5F98      		cbi 0xb,7
 130               	.LVL9:
 131               	.L7:
 132 005e 0895      		ret
 133               		.cfi_endproc
 134               	.LFE10:
 136               		.section	.progmem.data,"a",@progbits
 139               	__c.2159:
 140 0000 4D54 3838 		.string	"MT8816 driver initialised\n"
 140      3136 2064 
 140      7269 7665 
 140      7220 696E 
 140      6974 6961 
 141               		.text
 142               	.Letext0:
 143               		.file 3 "d:\\winavr\\avr\\include\\stdint.h"
 144               		.file 4 "d:\\winavr\\avr\\include\\stdio.h"
 145               		.file 5 "common/status.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mt8816.c
D:\cygwin64\tmp\ccDC1RQ9.s:2      *ABS*:0000003e __SP_H__
D:\cygwin64\tmp\ccDC1RQ9.s:3      *ABS*:0000003d __SP_L__
D:\cygwin64\tmp\ccDC1RQ9.s:4      *ABS*:0000003f __SREG__
D:\cygwin64\tmp\ccDC1RQ9.s:5      *ABS*:00000000 __tmp_reg__
D:\cygwin64\tmp\ccDC1RQ9.s:6      *ABS*:00000001 __zero_reg__
D:\cygwin64\tmp\ccDC1RQ9.s:12     .text:00000000 mt_init
D:\cygwin64\tmp\ccDC1RQ9.s:139    .progmem.data:00000000 __c.2159
D:\cygwin64\tmp\ccDC1RQ9.s:88     .text:00000042 mt_output_key

UNDEFINED SYMBOLS
STATUS_VERBOSE
ser0stream
fprintf_P
